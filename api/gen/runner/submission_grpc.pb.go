// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: runner/submission.proto

package runner

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Runner_ExecuteSubmission_FullMethodName = "/gojudge.Runner/ExecuteSubmission"
)

// RunnerClient is the client API for Runner service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RunnerClient interface {
	ExecuteSubmission(ctx context.Context, in *SubmissionRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SubmissionStatusUpdate], error)
}

type runnerClient struct {
	cc grpc.ClientConnInterface
}

func NewRunnerClient(cc grpc.ClientConnInterface) RunnerClient {
	return &runnerClient{cc}
}

func (c *runnerClient) ExecuteSubmission(ctx context.Context, in *SubmissionRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SubmissionStatusUpdate], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Runner_ServiceDesc.Streams[0], Runner_ExecuteSubmission_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubmissionRequest, SubmissionStatusUpdate]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Runner_ExecuteSubmissionClient = grpc.ServerStreamingClient[SubmissionStatusUpdate]

// RunnerServer is the server API for Runner service.
// All implementations must embed UnimplementedRunnerServer
// for forward compatibility.
type RunnerServer interface {
	ExecuteSubmission(*SubmissionRequest, grpc.ServerStreamingServer[SubmissionStatusUpdate]) error
	mustEmbedUnimplementedRunnerServer()
}

// UnimplementedRunnerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRunnerServer struct{}

func (UnimplementedRunnerServer) ExecuteSubmission(*SubmissionRequest, grpc.ServerStreamingServer[SubmissionStatusUpdate]) error {
	return status.Errorf(codes.Unimplemented, "method ExecuteSubmission not implemented")
}
func (UnimplementedRunnerServer) mustEmbedUnimplementedRunnerServer() {}
func (UnimplementedRunnerServer) testEmbeddedByValue()                {}

// UnsafeRunnerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RunnerServer will
// result in compilation errors.
type UnsafeRunnerServer interface {
	mustEmbedUnimplementedRunnerServer()
}

func RegisterRunnerServer(s grpc.ServiceRegistrar, srv RunnerServer) {
	// If the following call pancis, it indicates UnimplementedRunnerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Runner_ServiceDesc, srv)
}

func _Runner_ExecuteSubmission_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubmissionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RunnerServer).ExecuteSubmission(m, &grpc.GenericServerStream[SubmissionRequest, SubmissionStatusUpdate]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Runner_ExecuteSubmissionServer = grpc.ServerStreamingServer[SubmissionStatusUpdate]

// Runner_ServiceDesc is the grpc.ServiceDesc for Runner service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Runner_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gojudge.Runner",
	HandlerType: (*RunnerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ExecuteSubmission",
			Handler:       _Runner_ExecuteSubmission_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "runner/submission.proto",
}
