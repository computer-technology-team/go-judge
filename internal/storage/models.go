// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package storage

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type SubmissionStatus string

const (
	SubmissionStatusINQUEUE             SubmissionStatus = "IN_QUEUE"
	SubmissionStatusPENDING             SubmissionStatus = "PENDING"
	SubmissionStatusRUNNING             SubmissionStatus = "RUNNING"
	SubmissionStatusACCEPTED            SubmissionStatus = "ACCEPTED"
	SubmissionStatusWRONGANSWER         SubmissionStatus = "WRONG_ANSWER"
	SubmissionStatusTIMELIMITEXCEEDED   SubmissionStatus = "TIME_LIMIT_EXCEEDED"
	SubmissionStatusMEMORYLIMITEXCEEDED SubmissionStatus = "MEMORY_LIMIT_EXCEEDED"
	SubmissionStatusRUNTIMEERROR        SubmissionStatus = "RUNTIME_ERROR"
	SubmissionStatusCOMPILATIONERROR    SubmissionStatus = "COMPILATION_ERROR"
	SubmissionStatusINTERNALERROR       SubmissionStatus = "INTERNAL_ERROR"
)

func (e *SubmissionStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = SubmissionStatus(s)
	case string:
		*e = SubmissionStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for SubmissionStatus: %T", src)
	}
	return nil
}

type NullSubmissionStatus struct {
	SubmissionStatus SubmissionStatus `json:"submission_status"`
	Valid            bool             `json:"valid"` // Valid is true if SubmissionStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullSubmissionStatus) Scan(value interface{}) error {
	if value == nil {
		ns.SubmissionStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.SubmissionStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullSubmissionStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.SubmissionStatus), nil
}

type Problem struct {
	ID            int32              `db:"id" json:"id"`
	Title         string             `db:"title" json:"title"`
	Description   string             `db:"description" json:"description"`
	SampleInput   string             `db:"sample_input" json:"sample_input"`
	SampleOutput  string             `db:"sample_output" json:"sample_output"`
	TimeLimitMs   int64              `db:"time_limit_ms" json:"time_limit_ms"`
	MemoryLimitKb int64              `db:"memory_limit_kb" json:"memory_limit_kb"`
	CreatedAt     pgtype.Timestamptz `db:"created_at" json:"created_at"`
	CreatedBy     pgtype.UUID        `db:"created_by" json:"created_by"`
	Draft         bool               `db:"draft" json:"draft"`
	PublishedAt   pgtype.Timestamptz `db:"published_at" json:"published_at"`
}

type Submission struct {
	ID           pgtype.UUID        `db:"id" json:"id"`
	ProblemID    int32              `db:"problem_id" json:"problem_id"`
	UserID       pgtype.UUID        `db:"user_id" json:"user_id"`
	SolutionCode string             `db:"solution_code" json:"solution_code"`
	Status       SubmissionStatus   `db:"status" json:"status"`
	CreatedAt    pgtype.Timestamptz `db:"created_at" json:"created_at"`
	LastModified pgtype.Timestamptz `db:"last_modified" json:"last_modified"`
	Message      pgtype.Text        `db:"message" json:"message"`
	Retries      int32              `db:"retries" json:"retries"`
}

type TestCase struct {
	ID        int32  `db:"id" json:"id"`
	ProblemID int32  `db:"problem_id" json:"problem_id"`
	Input     string `db:"input" json:"input"`
	Output    string `db:"output" json:"output"`
}

type User struct {
	ID           pgtype.UUID `db:"id" json:"id"`
	Username     string      `db:"username" json:"username"`
	PasswordHash string      `db:"password_hash" json:"password_hash"`
	Superuser    bool        `db:"superuser" json:"superuser"`
}
