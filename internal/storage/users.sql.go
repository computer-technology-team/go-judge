// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package storage

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAdmin = `-- name: CreateAdmin :one
INSERT INTO users (username, password_hash, superuser)
VALUES ($1, $2, true)
RETURNING id, username, password_hash, superuser
`

type CreateAdminRow struct {
	ID           pgtype.UUID `db:"id" json:"id"`
	Username     string      `db:"username" json:"username"`
	PasswordHash string      `db:"password_hash" json:"password_hash"`
	Superuser    bool        `db:"superuser" json:"superuser"`
}

func (q *Queries) CreateAdmin(ctx context.Context, db DBTX, username string, passwordHash string) (CreateAdminRow, error) {
	row := db.QueryRow(ctx, createAdmin, username, passwordHash)
	var i CreateAdminRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PasswordHash,
		&i.Superuser,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (username, password_hash, superuser)
VALUES ($1, $2, false)
RETURNING id, username, password_hash, superuser
`

type CreateUserRow struct {
	ID           pgtype.UUID `db:"id" json:"id"`
	Username     string      `db:"username" json:"username"`
	PasswordHash string      `db:"password_hash" json:"password_hash"`
	Superuser    bool        `db:"superuser" json:"superuser"`
}

func (q *Queries) CreateUser(ctx context.Context, db DBTX, username string, passwordHash string) (CreateUserRow, error) {
	row := db.QueryRow(ctx, createUser, username, passwordHash)
	var i CreateUserRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PasswordHash,
		&i.Superuser,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, username, password_hash, superuser, problems_attempted, problems_solved
FROM users
WHERE id = $1
`

func (q *Queries) GetUser(ctx context.Context, db DBTX, id pgtype.UUID) (User, error) {
	row := db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PasswordHash,
		&i.Superuser,
		&i.ProblemsAttempted,
		&i.ProblemsSolved,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, password_hash, superuser, problems_attempted, problems_solved
FROM users
WHERE username = $1
`

func (q *Queries) GetUserByUsername(ctx context.Context, db DBTX, username string) (User, error) {
	row := db.QueryRow(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PasswordHash,
		&i.Superuser,
		&i.ProblemsAttempted,
		&i.ProblemsSolved,
	)
	return i, err
}

const toggleUserSuperLevel = `-- name: ToggleUserSuperLevel :one
UPDATE users
SET superuser = NOT superuser
WHERE id = $1
RETURNING id, username, password_hash, superuser, problems_attempted, problems_solved
`

func (q *Queries) ToggleUserSuperLevel(ctx context.Context, db DBTX, id pgtype.UUID) (User, error) {
	row := db.QueryRow(ctx, toggleUserSuperLevel, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.PasswordHash,
		&i.Superuser,
		&i.ProblemsAttempted,
		&i.ProblemsSolved,
	)
	return i, err
}
