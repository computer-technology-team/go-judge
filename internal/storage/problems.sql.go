// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: problems.sql

package storage

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getAllProblemsSorted = `-- name: GetAllProblemsSorted :many
SELECT id, title, description, sample_input, sample_output, time_limit, memory_limit, created_at, created_by
FROM problems
ORDER BY created_at DESC
`

func (q *Queries) GetAllProblemsSorted(ctx context.Context, db DBTX) ([]Problem, error) {
	rows, err := db.Query(ctx, getAllProblemsSorted)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Problem
	for rows.Next() {
		var i Problem
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.SampleInput,
			&i.SampleOutput,
			&i.TimeLimit,
			&i.MemoryLimit,
			&i.CreatedAt,
			&i.CreatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertProblem = `-- name: InsertProblem :one
INSERT INTO problems (title, description, sample_input, sample_output, time_limit, memory_limit, created_by)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, title, description, sample_input, sample_output, time_limit, memory_limit, created_at, created_by
`

type InsertProblemParams struct {
	Title        string      `db:"title" json:"title"`
	Description  string      `db:"description" json:"description"`
	SampleInput  string      `db:"sample_input" json:"sample_input"`
	SampleOutput string      `db:"sample_output" json:"sample_output"`
	TimeLimit    int32       `db:"time_limit" json:"time_limit"`
	MemoryLimit  int32       `db:"memory_limit" json:"memory_limit"`
	CreatedBy    pgtype.UUID `db:"created_by" json:"created_by"`
}

func (q *Queries) InsertProblem(ctx context.Context, db DBTX, arg InsertProblemParams) (Problem, error) {
	row := db.QueryRow(ctx, insertProblem,
		arg.Title,
		arg.Description,
		arg.SampleInput,
		arg.SampleOutput,
		arg.TimeLimit,
		arg.MemoryLimit,
		arg.CreatedBy,
	)
	var i Problem
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.SampleInput,
		&i.SampleOutput,
		&i.TimeLimit,
		&i.MemoryLimit,
		&i.CreatedAt,
		&i.CreatedBy,
	)
	return i, err
}
